# Alternative Dockerfile with CA certificates support
# Use this if your application makes HTTPS requests to external APIs

# Builder stage
FROM golang:1.23.6-alpine AS builder

# Build arguments
ARG GITHUB_TOKEN
ARG VERSION=unknown

# Environment variables for optimized build
ENV CGO_ENABLED=0 \
    GOOS=linux \
    GOARCH=amd64 \
    GO111MODULE=on \
    TOKEN=$GITHUB_TOKEN \
    VERSION=${VERSION} \
    USER=spooliq

# Install minimal dependencies including UPX
RUN apk add --no-cache git ca-certificates upx

# Configure git for private repositories
RUN git config --global url."https://${TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

# Set working directory
WORKDIR /app

# Copy dependency files first (better layer caching)
COPY go.mod go.sum* ./

# Download dependencies
RUN go mod download

# Install swag for API documentation
RUN go install github.com/swaggo/swag/cmd/swag@latest

# Copy source code
COPY . .

# Build the application with maximum optimization
RUN go build \
    -a \
    -installsuffix cgo \
    -ldflags="-w -s -X main.version=${VERSION}" \
    -o spooliq \
    ./main.go

# Compress binary with UPX (maximum compression)
RUN upx --best --lzma spooliq

# Production stage - using distroless with CA certificates
FROM gcr.io/distroless/static-debian12:nonroot AS production

# Metadata
ARG VERSION=unknown
LABEL version=${VERSION}
LABEL maintainer="RodolfoBonis"

# Set environment variables for OpenTelemetry
ENV USER=nonroot

# Copy CA certificates and compressed binary
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=builder /app/spooliq /spooliq



# Expose port
EXPOSE 8000

# Use non-root user (already set by distroless:nonroot)
USER nonroot:nonroot

# Run the application
ENTRYPOINT ["/spooliq"] 