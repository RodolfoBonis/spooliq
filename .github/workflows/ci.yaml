name: CI - spooliq


on:
  push:
    branches:
      - main
      - develop
    paths-ignore:
      - 'version.txt'
  pull_request:
    branches:
      - main
      - develop
    types:
      - opened
      - synchronize
      - reopened

permissions:
  contents: write
  checks: read
  discussions: write
  repository-projects: write
  issues: write
  pull-requests: write      

env:
  GO_VERSION: '1.23'

jobs:
  lint_go:
    name: Lint Go Code
    runs-on: [ubuntu-latest]
    outputs:
      status: ${{ steps.lint.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Setup git config for private repos
        run: |
          git config --global url."https://${{ github.token }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

      - name: Download dependencies
        run: go mod download

      - name: Install Lint Dependencies
        run: |
          go install golang.org/x/lint/golint@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest
          go install golang.org/x/tools/cmd/goimports@latest
          export PATH=$PATH:$(go env GOPATH)/bin

      - name: Run lint
        id: lint
        run: |
          if [ -f .config/scripts/lint.sh ]; then
            chmod +x .config/scripts/lint.sh
            export PATH=$PATH:$(go env GOPATH)/bin
            set +e
            ./.config/scripts/lint.sh > lint_output.txt 2>&1
            echo "status=$?" >> $GITHUB_OUTPUT
            set -e
          else
            echo "status=0" >> $GITHUB_OUTPUT
          fi

      - name: Install Python dependencies for comment
        if: ${{ github.event_name == 'pull_request' && steps.lint.outputs.status != '0' }}
        run: |
          if [ -f .config/scripts/requirements.txt ]; then
            pip install -r .config/scripts/requirements.txt
          else
            pip install openai PyGithub
          fi

      - name: Comment lint issues on PR
        if: ${{ github.event_name == 'pull_request' && steps.lint.outputs.status != '0' }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          GITHUB_TOKEN: ${{ github.token }}
          REPO_NAME: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          if [ -f .config/scripts/generate_lint_report.py ]; then
            python .config/scripts/generate_lint_report.py
          fi

      - name: Exit if lint failed
        if: ${{ steps.lint.outputs.status != '0' }}
        run: exit 1

      - name: Upload lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: lint_output.txt

  test:
    name: Run Tests
    runs-on: [ubuntu-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Setup git config for private repos (if needed)
        run: |
          git config --global url."https://${{ github.token }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

      - name: Download dependencies
        run: go mod download

      - name: Run tests with coverage (Windows)
        if: runner.os == 'Windows'
        run: |
          go test -v -coverprofile="coverage.out" "./..."
          go tool cover -html="coverage.out" -o="coverage.html"

      - name: Run tests with coverage (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html

  check_vulnerabilities:
    name: Security Vulnerability Check
    runs-on: [ubuntu-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Define Private Dependencies
        run: |
          export GOPRIVATE=github.com/RodolfoBonis/go_key_guardian

      - name: Run govulncheck
        id: govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./... > vulnerability_report.txt 2>&1 || echo "Vulnerabilities found"

      - name: Install Python dependencies for vulnerability comment
        if: ${{ steps.govulncheck.outcome == 'failure' && github.event_name == 'pull_request' }}
        run: |
          pip install -r .config/scripts/requirements.txt
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          GITHUB_TOKEN: ${{ github.token }}
          REPO_NAME: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

      - name: Comment vulnerability issues on PR
        if: ${{ steps.govulncheck.outcome == 'failure' && github.event_name == 'pull_request'}}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          GITHUB_TOKEN: ${{ github.token }}
          REPO_NAME: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: python .config/scripts/generate_vulnerability_report.py


      - name: Upload vulnerability report
        if: ${{ steps.govulncheck.outcome == 'failure' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "## ðŸ”’ Security Vulnerability Report" >> vulnerability_summary.md
          echo "" >> vulnerability_summary.md
          echo "Vulnerabilities were found in this build:" >> vulnerability_summary.md
          echo "" >> vulnerability_summary.md
          echo '```' >> vulnerability_summary.md
          cat vulnerability_report.txt >> vulnerability_summary.md
          echo '```' >> vulnerability_summary.md

      - name: Upload vulnerability artifacts
        if: ${{ steps.govulncheck.outcome == 'failure' }}
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-report
          path: |
            vulnerability_report.txt
            vulnerability_summary.md

      - name: Fail job if vulnerabilities found
        if: ${{ steps.govulncheck.outcome == 'failure' }}
        run: exit 1

  notify_success:
    name: Notify Success
    runs-on: [ubuntu-latest]
    needs: [lint_go, test, check_vulnerabilities]
    if: ${{ needs.lint_go.result == 'success' && needs.test.result == 'success' && needs.check_vulnerabilities.result == 'success' }}
    steps:
      - name: Calculate Build Duration
        id: build-duration
        run: |
          START_TIME="${{ github.event.head_commit.timestamp }}"
          if [ -z "$START_TIME" ] || [ "$START_TIME" = "null" ]; then
            START_TIME="${{ github.event.repository.pushed_at }}"
          fi
          if [ -z "$START_TIME" ] || [ "$START_TIME" = "null" ]; then
            # Fallback: use workflow start time (approximate)
            START_TIME=$(date -u -d '2 minutes ago' +%Y-%m-%dT%H:%M:%SZ)
          fi
          
          END_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          # Calculate duration in seconds using date command
          START_EPOCH=$(date -d "$START_TIME" +%s)
          END_EPOCH=$(date -d "$END_TIME" +%s)
          DURATION_SECONDS=$((END_EPOCH - START_EPOCH))
          
          # Convert to human readable format
          if [ $DURATION_SECONDS -lt 60 ]; then
            DURATION="${DURATION_SECONDS}s"
          elif [ $DURATION_SECONDS -lt 3600 ]; then
            MINUTES=$((DURATION_SECONDS / 60))
            SECONDS=$((DURATION_SECONDS % 60))
            DURATION="${MINUTES}m ${SECONDS}s"
          else
            HOURS=$((DURATION_SECONDS / 3600))
            MINUTES=$(((DURATION_SECONDS % 3600) / 60))
            SECONDS=$((DURATION_SECONDS % 60))
            DURATION="${HOURS}h ${MINUTES}m ${SECONDS}s"
          fi
          
          echo "duration=$DURATION" >> $GITHUB_OUTPUT

      - name: Notify n8n Success
        run: |
          curl -X POST "${{ secrets.N8N_WEBHOOK_URL }}" \
            -H "Authorization: Bearer ${{ secrets.N8N_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "event_type": "ci_success",
              "repository": "${{ github.repository }}",
              "workflow": "${{ github.workflow }}",
              "commit_sha": "${{ github.sha }}",
              "tag": null,
              "branch": "${{ github.ref }}",
              "actor": "${{ github.actor }}",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "details": {
                "build_time": "${{ steps.build-duration.outputs.duration }}",
                "test_results": "all passed",
                "coverage": "available in artifacts",
                "pr_number": "${{ github.event_name == 'pull_request' && github.event.pull_request.number || null }}",
                "pr_url": "${{ github.event_name == 'pull_request' && format('https://github.com/{0}/pull/{1}', github.repository, github.event.pull_request.number) || null }}"
              },
              "telegram_chat_id": "${{ secrets.CHAT_ID }}",
              "telegram_thread_id": "${{ secrets.THREAD_ID }}"
            }'

  notify_failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [lint_go, test, check_vulnerabilities]
    if: ${{ needs.lint_go.result != 'success' || needs.test.result != 'success' || needs.check_vulnerabilities.result != 'success' }}
    steps:
      - name: Determine failure type
        id: failure-analysis
        run: |
          if [[ "${{ needs.lint_go.result }}" != "success" ]]; then
            echo "error_type=Lint errors found" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "error_type=Tests failed" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.check_vulnerabilities.result }}" != "success" ]]; then
            echo "error_type=Security vulnerabilities found" >> $GITHUB_OUTPUT
          else
            echo "error_type=Unknown CI failure" >> $GITHUB_OUTPUT
          fi

      - name: Notify n8n Failure
        run: |
          curl -X POST "${{ secrets.N8N_WEBHOOK_URL }}" \
            -H "Authorization: Bearer ${{ secrets.N8N_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "event_type": "ci_failure",
              "repository": "${{ github.repository }}",
              "workflow": "${{ github.workflow }}",
              "commit_sha": "${{ github.sha }}",
              "tag": null,
              "branch": "${{ github.ref }}",
              "actor": "${{ github.actor }}",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "details": {
                "error_message": "${{ steps.failure-analysis.outputs.error_type }}",
                "logs_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                "failed_jobs": {
                  "lint": "${{ needs.lint_go.result }}",
                  "test": "${{ needs.test.result }}",
                  "security": "${{ needs.check_vulnerabilities.result }}"
                },
                "pr_number": "${{ github.event_name == 'pull_request' && github.event.pull_request.number || null }}",
                "pr_url": "${{ github.event_name == 'pull_request' && format('https://github.com/{0}/pull/{1}', github.repository, github.event.pull_request.number) || null }}"
              },
              "telegram_chat_id": "${{ secrets.CHAT_ID }}",
              "telegram_thread_id": "${{ secrets.THREAD_ID }}"
            }'
