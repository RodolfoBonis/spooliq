{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/auth/forgot-password": {
            "post": {
                "description": "Request a password reset for a user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Password Reset Request",
                "parameters": [
                    {
                        "description": "Password reset request data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.ForgotPasswordRequestEntity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset request sent",
                        "schema": {
                            "$ref": "#/definitions/entities.ForgotPasswordResponseEntity"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate user and return JWT tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.RequestLoginEntity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful login",
                        "schema": {
                            "$ref": "#/definitions/entities.LoginResponseEntity"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Invalidate the refresh token and logout the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User Logout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer refresh token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refresh the user's access and refresh tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh Login Access Token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer refresh token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tokens refreshed",
                        "schema": {
                            "$ref": "#/definitions/entities.LoginResponseEntity"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user account in SpoolIQ",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User Registration",
                "parameters": [
                    {
                        "description": "Registration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.RequestRegisterEntity"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful registration",
                        "schema": {
                            "$ref": "#/definitions/entities.RegisterResponseEntity"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/validate": {
            "post": {
                "description": "Validate the current access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Validate Auth Token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token is valid",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/exports/formats": {
            "get": {
                "description": "Returns the list of supported export formats",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exports"
                ],
                "summary": "Get supported export formats",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SupportedFormatsResponse"
                        }
                    }
                }
            }
        },
        "/filaments": {
            "get": {
                "description": "Get all filaments accessible to the user (global + user's own)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Filaments"
                ],
                "summary": "Get All Filaments",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved filaments",
                        "schema": {
                            "$ref": "#/definitions/filaments.FilamentsListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new filament record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Filaments"
                ],
                "summary": "Create Filament",
                "parameters": [
                    {
                        "description": "Filament data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usecases.CreateFilamentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created filament",
                        "schema": {
                            "$ref": "#/definitions/usecases.FilamentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/filaments/global": {
            "get": {
                "description": "Get all global filaments (not owned by any user)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Filaments"
                ],
                "summary": "Get Global Filaments",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved global filaments",
                        "schema": {
                            "$ref": "#/definitions/filaments.FilamentsListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/filaments/my": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all filaments owned by the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Filaments"
                ],
                "summary": "Get User Filaments",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user filaments",
                        "schema": {
                            "$ref": "#/definitions/filaments.FilamentsListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/filaments/{id}": {
            "get": {
                "description": "Get a filament by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Filaments"
                ],
                "summary": "Get Filament",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Filament ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved filament",
                        "schema": {
                            "$ref": "#/definitions/usecases.FilamentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an existing filament (only user's own filaments)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Filaments"
                ],
                "summary": "Update Filament",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Filament ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated filament data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usecases.UpdateFilamentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated filament",
                        "schema": {
                            "$ref": "#/definitions/usecases.FilamentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a filament (only user's own filaments)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Filaments"
                ],
                "summary": "Delete Filament",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Filament ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted filament"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/presets": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new energy or machine preset (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "presets"
                ],
                "summary": "Create preset",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Preset type: 'energy' or 'machine'",
                        "name": "type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Preset data (CreateEnergyPresetRequest or CreateMachinePresetRequest)",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {}
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Preset created successfully"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/presets/energy": {
            "get": {
                "description": "Retrieves energy presets, optionally filtered by location",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "presets"
                ],
                "summary": "Get energy presets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by location",
                        "name": "location",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EnergyPresetsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/presets/energy/locations": {
            "get": {
                "description": "Retrieves all available locations for energy presets",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "presets"
                ],
                "summary": "Get energy locations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EnergyLocationResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/presets/machines": {
            "get": {
                "description": "Retrieves all available machine presets",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "presets"
                ],
                "summary": "Get machine presets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.MachinePresetsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/presets/{key}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing preset by key (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "presets"
                ],
                "summary": "Update preset",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Preset key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated preset data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePresetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Preset updated successfully"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a preset by key (admin only)",
                "tags": [
                    "presets"
                ],
                "summary": "Delete preset",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Preset key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Preset deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/quotes/{id}/export/csv": {
            "post": {
                "description": "Exports a quote and its calculation results as CSV",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/csv"
                ],
                "tags": [
                    "exports"
                ],
                "summary": "Export quote as CSV",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Quote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Export options",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ExportRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CSV file",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/quotes/{id}/export/json": {
            "post": {
                "description": "Exports a quote and its calculation results as JSON",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exports"
                ],
                "summary": "Export quote as JSON",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Quote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Export options",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ExportRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JSON file",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/quotes/{id}/export/pdf": {
            "post": {
                "description": "Exports a quote and its calculation results as PDF",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/pdf"
                ],
                "tags": [
                    "exports"
                ],
                "summary": "Export quote as PDF",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Quote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Export options",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ExportRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PDF file",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/system": {
            "get": {
                "description": "Returns the current system status (OS, CPU, memory, GPU, storage, server)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Get System Status",
                "responses": {
                    "200": {
                        "description": "System status info",
                        "schema": {
                            "$ref": "#/definitions/entities.SystemStatus"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of users with optional search filtering (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get users list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search term for username, email, first name, or last name",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size (default: 20, max: 100)",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UsersListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new user account (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create new user",
                "parameters": [
                    {
                        "description": "User creation data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the authenticated user's profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get current user profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a user by their ID (admin can get any user, users can get themselves)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a user account (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates user information (admin can update any user, users can update themselves with restrictions)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/{id}/enabled": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Enables or disables a user account (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Enable/disable user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Enable/disable data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SetUserEnabledRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User status updated successfully"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/{id}/password": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Resets a user's password (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Reset user password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Password reset data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Password reset successfully"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/{id}/roles": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a role to a user (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Add role to user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Role added successfully"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/{id}/roles/{role}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a role from a user (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Remove role from user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Role name",
                        "name": "role",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Role removed successfully"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/quotes": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all quotes belonging to the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "quotes"
                ],
                "summary": "Get all quotes for the authenticated user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new quote with filament lines and profiles",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "quotes"
                ],
                "summary": "Create a new quote",
                "parameters": [
                    {
                        "description": "Quote data",
                        "name": "quote",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateQuoteRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.QuoteResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/v1/quotes/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a quote by ID with all its filament lines and profiles",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "quotes"
                ],
                "summary": "Get a quote by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Quote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.QuoteResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a quote with new data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "quotes"
                ],
                "summary": "Update a quote",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Quote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Quote data",
                        "name": "quote",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateQuoteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.QuoteResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a quote and all its related data",
                "tags": [
                    "quotes"
                ],
                "summary": "Delete a quote",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Quote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/v1/quotes/{id}/calculate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Calculate all costs for a quote based on provided parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "quotes"
                ],
                "summary": "Calculate quote costs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Quote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Calculation parameters",
                        "name": "calculation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CalculateQuoteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CalculationResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/v1/quotes/{id}/duplicate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a copy of an existing quote",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "quotes"
                ],
                "summary": "Duplicate a quote",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Quote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.QuoteResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CalculateQuoteRequest": {
            "type": "object",
            "required": [
                "print_time_hours",
                "service_type"
            ],
            "properties": {
                "modeler_minutes": {
                    "type": "number",
                    "minimum": 0
                },
                "operator_minutes": {
                    "type": "number",
                    "minimum": 0
                },
                "print_time_hours": {
                    "type": "number",
                    "minimum": 0
                },
                "service_type": {
                    "type": "string",
                    "enum": [
                        "printing_only",
                        "printing_plus",
                        "full_service"
                    ]
                }
            }
        },
        "dto.CalculationResult": {
            "type": "object",
            "properties": {
                "applied_margin": {
                    "type": "number"
                },
                "direct_cost": {
                    "type": "number"
                },
                "energy_cost": {
                    "type": "number"
                },
                "final_price": {
                    "type": "number"
                },
                "labor_cost": {
                    "type": "number"
                },
                "material_cost": {
                    "type": "number"
                },
                "modeler_minutes": {
                    "type": "number"
                },
                "operator_minutes": {
                    "type": "number"
                },
                "print_time_hours": {
                    "type": "number"
                },
                "service_type": {
                    "type": "string"
                },
                "wear_cost": {
                    "type": "number"
                }
            }
        },
        "dto.CostProfileResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "overhead_amount": {
                    "type": "number"
                },
                "quote_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "wear_percentage": {
                    "type": "number"
                }
            }
        },
        "dto.CreateCostProfileRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "overhead_amount": {
                    "type": "number",
                    "minimum": 0
                },
                "wear_percentage": {
                    "type": "number",
                    "maximum": 100,
                    "minimum": 0
                }
            }
        },
        "dto.CreateEnergyProfileRequest": {
            "type": "object",
            "required": [
                "base_tariff",
                "location",
                "year"
            ],
            "properties": {
                "base_tariff": {
                    "type": "number",
                    "minimum": 0
                },
                "description": {
                    "type": "string"
                },
                "flag_surcharge": {
                    "type": "number",
                    "minimum": 0
                },
                "location": {
                    "type": "string"
                },
                "year": {
                    "type": "integer",
                    "maximum": 2030,
                    "minimum": 2020
                }
            }
        },
        "dto.CreateFilamentLineRequest": {
            "type": "object",
            "required": [
                "weight_grams"
            ],
            "properties": {
                "filament_id": {
                    "description": "Option 1: Automatic snapshot from existing filament",
                    "type": "integer",
                    "minimum": 1
                },
                "filament_snapshot_brand": {
                    "type": "string"
                },
                "filament_snapshot_color": {
                    "type": "string"
                },
                "filament_snapshot_color_hex": {
                    "type": "string"
                },
                "filament_snapshot_material": {
                    "type": "string"
                },
                "filament_snapshot_name": {
                    "description": "Option 2: Manual snapshot data (required if filament_id not provided)",
                    "type": "string"
                },
                "filament_snapshot_price_per_kg": {
                    "type": "number",
                    "minimum": 0
                },
                "filament_snapshot_price_per_meter": {
                    "type": "number",
                    "minimum": 0
                },
                "filament_snapshot_url": {
                    "type": "string"
                },
                "length_meters": {
                    "type": "number",
                    "minimum": 0
                },
                "weight_grams": {
                    "description": "Required fields",
                    "type": "number",
                    "minimum": 0
                }
            }
        },
        "dto.CreateMachineProfileRequest": {
            "type": "object",
            "required": [
                "brand",
                "model",
                "name",
                "watt"
            ],
            "properties": {
                "brand": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "idle_factor": {
                    "type": "number",
                    "maximum": 1,
                    "minimum": 0
                },
                "model": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "watt": {
                    "type": "number",
                    "minimum": 0
                }
            }
        },
        "dto.CreateMarginProfileRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "full_service_margin": {
                    "type": "number",
                    "minimum": 0
                },
                "modeler_rate_per_hour": {
                    "type": "number",
                    "minimum": 0
                },
                "operator_rate_per_hour": {
                    "type": "number",
                    "minimum": 0
                },
                "printing_only_margin": {
                    "type": "number",
                    "minimum": 0
                },
                "printing_plus_margin": {
                    "type": "number",
                    "minimum": 0
                }
            }
        },
        "dto.CreateQuoteRequest": {
            "type": "object",
            "required": [
                "filament_lines",
                "title"
            ],
            "properties": {
                "cost_profile": {
                    "$ref": "#/definitions/dto.CreateCostProfileRequest"
                },
                "energy_profile": {
                    "$ref": "#/definitions/dto.CreateEnergyProfileRequest"
                },
                "filament_lines": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/dto.CreateFilamentLineRequest"
                    }
                },
                "machine_profile": {
                    "$ref": "#/definitions/dto.CreateMachineProfileRequest"
                },
                "margin_profile": {
                    "$ref": "#/definitions/dto.CreateMarginProfileRequest"
                },
                "notes": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                }
            }
        },
        "dto.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "temporary_password": {
                    "type": "boolean"
                },
                "username": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                }
            }
        },
        "dto.EnergyLocationResponse": {
            "type": "object",
            "properties": {
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.EnergyPresetResponse": {
            "type": "object",
            "properties": {
                "base_tariff": {
                    "type": "number"
                },
                "description": {
                    "type": "string"
                },
                "flag_surcharge": {
                    "type": "number"
                },
                "location": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "dto.EnergyPresetsResponse": {
            "type": "object",
            "properties": {
                "presets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.EnergyPresetResponse"
                    }
                }
            }
        },
        "dto.EnergyProfileResponse": {
            "type": "object",
            "properties": {
                "base_tariff": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "flag_surcharge": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "quote_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "dto.FilamentLineResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "filament_snapshot_brand": {
                    "type": "string"
                },
                "filament_snapshot_color": {
                    "type": "string"
                },
                "filament_snapshot_color_hex": {
                    "type": "string"
                },
                "filament_snapshot_material": {
                    "type": "string"
                },
                "filament_snapshot_name": {
                    "type": "string"
                },
                "filament_snapshot_price_per_kg": {
                    "type": "number"
                },
                "filament_snapshot_price_per_meter": {
                    "type": "number"
                },
                "filament_snapshot_url": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "length_meters": {
                    "type": "number"
                },
                "quote_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "weight_grams": {
                    "type": "number"
                }
            }
        },
        "dto.MachinePresetResponse": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "idle_factor": {
                    "type": "number"
                },
                "model": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "watt": {
                    "type": "number"
                }
            }
        },
        "dto.MachinePresetsResponse": {
            "type": "object",
            "properties": {
                "machines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.MachinePresetResponse"
                    }
                }
            }
        },
        "dto.MachineProfileResponse": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "idle_factor": {
                    "type": "number"
                },
                "model": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "quote_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "watt": {
                    "type": "number"
                }
            }
        },
        "dto.MarginProfileResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "full_service_margin": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "modeler_rate_per_hour": {
                    "type": "number"
                },
                "operator_rate_per_hour": {
                    "type": "number"
                },
                "printing_only_margin": {
                    "type": "number"
                },
                "printing_plus_margin": {
                    "type": "number"
                },
                "quote_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.QuoteResponse": {
            "type": "object",
            "properties": {
                "cost_profile": {
                    "$ref": "#/definitions/dto.CostProfileResponse"
                },
                "created_at": {
                    "type": "string"
                },
                "energy_profile": {
                    "$ref": "#/definitions/dto.EnergyProfileResponse"
                },
                "filament_lines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.FilamentLineResponse"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "machine_profile": {
                    "$ref": "#/definitions/dto.MachineProfileResponse"
                },
                "margin_profile": {
                    "$ref": "#/definitions/dto.MarginProfileResponse"
                },
                "notes": {
                    "type": "string"
                },
                "owner_user_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.ResetPasswordRequest": {
            "type": "object",
            "required": [
                "new_password"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "minLength": 8
                },
                "temporary": {
                    "type": "boolean"
                }
            }
        },
        "dto.SetUserEnabledRequest": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "dto.UpdateCostProfileRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "overhead_amount": {
                    "type": "number",
                    "minimum": 0
                },
                "wear_percentage": {
                    "type": "number",
                    "maximum": 100,
                    "minimum": 0
                }
            }
        },
        "dto.UpdateEnergyProfileRequest": {
            "type": "object",
            "required": [
                "base_tariff",
                "location",
                "year"
            ],
            "properties": {
                "base_tariff": {
                    "type": "number",
                    "minimum": 0
                },
                "description": {
                    "type": "string"
                },
                "flag_surcharge": {
                    "type": "number",
                    "minimum": 0
                },
                "location": {
                    "type": "string"
                },
                "year": {
                    "type": "integer",
                    "maximum": 2030,
                    "minimum": 2020
                }
            }
        },
        "dto.UpdateFilamentLineRequest": {
            "type": "object",
            "required": [
                "filament_snapshot_brand",
                "filament_snapshot_color",
                "filament_snapshot_material",
                "filament_snapshot_name",
                "filament_snapshot_price_per_kg",
                "weight_grams"
            ],
            "properties": {
                "filament_snapshot_brand": {
                    "type": "string"
                },
                "filament_snapshot_color": {
                    "type": "string"
                },
                "filament_snapshot_color_hex": {
                    "type": "string"
                },
                "filament_snapshot_material": {
                    "type": "string"
                },
                "filament_snapshot_name": {
                    "type": "string"
                },
                "filament_snapshot_price_per_kg": {
                    "type": "number",
                    "minimum": 0
                },
                "filament_snapshot_price_per_meter": {
                    "type": "number",
                    "minimum": 0
                },
                "filament_snapshot_url": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "length_meters": {
                    "type": "number",
                    "minimum": 0
                },
                "weight_grams": {
                    "type": "number",
                    "minimum": 0
                }
            }
        },
        "dto.UpdateMachineProfileRequest": {
            "type": "object",
            "required": [
                "brand",
                "model",
                "name",
                "watt"
            ],
            "properties": {
                "brand": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "idle_factor": {
                    "type": "number",
                    "maximum": 1,
                    "minimum": 0
                },
                "model": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "watt": {
                    "type": "number",
                    "minimum": 0
                }
            }
        },
        "dto.UpdateMarginProfileRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "full_service_margin": {
                    "type": "number",
                    "minimum": 0
                },
                "modeler_rate_per_hour": {
                    "type": "number",
                    "minimum": 0
                },
                "operator_rate_per_hour": {
                    "type": "number",
                    "minimum": 0
                },
                "printing_only_margin": {
                    "type": "number",
                    "minimum": 0
                },
                "printing_plus_margin": {
                    "type": "number",
                    "minimum": 0
                }
            }
        },
        "dto.UpdatePresetRequest": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {}
            }
        },
        "dto.UpdateQuoteRequest": {
            "type": "object",
            "required": [
                "filament_lines",
                "title"
            ],
            "properties": {
                "cost_profile": {
                    "$ref": "#/definitions/dto.UpdateCostProfileRequest"
                },
                "energy_profile": {
                    "$ref": "#/definitions/dto.UpdateEnergyProfileRequest"
                },
                "filament_lines": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/dto.UpdateFilamentLineRequest"
                    }
                },
                "machine_profile": {
                    "$ref": "#/definitions/dto.UpdateMachineProfileRequest"
                },
                "margin_profile": {
                    "$ref": "#/definitions/dto.UpdateMarginProfileRequest"
                },
                "notes": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                }
            }
        },
        "dto.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                }
            }
        },
        "dto.UserResponse": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "first_name": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.UserRoleRequest": {
            "type": "object",
            "required": [
                "role"
            ],
            "properties": {
                "role": {
                    "type": "string"
                }
            }
        },
        "dto.UsersListResponse": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UserResponse"
                    }
                }
            }
        },
        "entities.CPU": {
            "description": "CPU data",
            "type": "object",
            "properties": {
                "cores": {
                    "type": "integer",
                    "format": "int32"
                },
                "model": {
                    "type": "string"
                },
                "threads": {
                    "type": "integer",
                    "format": "int32"
                },
                "usage": {
                    "type": "string"
                }
            }
        },
        "entities.ForgotPasswordRequestEntity": {
            "description": "Forgot password request data",
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "User email address",
                    "type": "string",
                    "example": "user@example.com"
                }
            }
        },
        "entities.ForgotPasswordResponseEntity": {
            "description": "Forgot password response data",
            "type": "object",
            "properties": {
                "email": {
                    "description": "User email",
                    "type": "string",
                    "example": "user@example.com"
                },
                "message": {
                    "description": "Success message",
                    "type": "string",
                    "example": "Password reset instructions have been sent to your email"
                }
            }
        },
        "entities.GPU": {
            "description": "GPU data",
            "type": "object",
            "properties": {
                "available": {
                    "type": "boolean"
                },
                "cores": {
                    "description": "Número de núcleos da GPU (quando disponível)",
                    "type": "integer"
                },
                "memory": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                }
            }
        },
        "entities.LoginResponseEntity": {
            "description": "LoginResponseEntity model data",
            "type": "object",
            "properties": {
                "accessToken": {
                    "description": "Token to access this API",
                    "type": "string"
                },
                "expiresIn": {
                    "description": "Time to expires token in int",
                    "type": "integer"
                },
                "refreshToken": {
                    "description": "Token to refresh Access Token",
                    "type": "string"
                }
            }
        },
        "entities.Memory": {
            "description": "Memory data",
            "type": "object",
            "properties": {
                "available": {
                    "type": "string"
                },
                "percentage": {
                    "type": "string"
                },
                "total": {
                    "type": "string"
                },
                "used": {
                    "type": "string"
                }
            }
        },
        "entities.RegisterResponseEntity": {
            "description": "Registration response data",
            "type": "object",
            "properties": {
                "email": {
                    "description": "User email",
                    "type": "string",
                    "example": "user@example.com"
                },
                "message": {
                    "description": "Success message",
                    "type": "string",
                    "example": "User registered successfully"
                },
                "userID": {
                    "description": "User ID (UUID)",
                    "type": "string",
                    "example": "uuid"
                }
            }
        },
        "entities.RequestLoginEntity": {
            "description": "RequestLoginEntity model data",
            "type": "object",
            "properties": {
                "email": {
                    "description": "User email",
                    "type": "string"
                },
                "password": {
                    "description": "User password",
                    "type": "string"
                }
            }
        },
        "entities.RequestRegisterEntity": {
            "description": "Registration request data",
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "User email address",
                    "type": "string",
                    "example": "user@example.com"
                },
                "firstName": {
                    "description": "User first name",
                    "type": "string",
                    "minLength": 2,
                    "example": "John"
                },
                "lastName": {
                    "description": "User last name",
                    "type": "string",
                    "minLength": 2,
                    "example": "Doe"
                },
                "password": {
                    "description": "User password (minimum 8 characters)",
                    "type": "string",
                    "minLength": 8,
                    "example": "SecurePass123"
                }
            }
        },
        "entities.Server": {
            "description": "Server data",
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "entities.Storage": {
            "description": "Storage data",
            "type": "object",
            "properties": {
                "percentage": {
                    "type": "string"
                },
                "total": {
                    "type": "string"
                },
                "used": {
                    "type": "string"
                }
            }
        },
        "entities.SystemStatus": {
            "description": "System status data",
            "type": "object",
            "properties": {
                "cpu": {
                    "$ref": "#/definitions/entities.CPU"
                },
                "gpu": {
                    "$ref": "#/definitions/entities.GPU"
                },
                "memory": {
                    "$ref": "#/definitions/entities.Memory"
                },
                "os": {
                    "type": "string"
                },
                "server": {
                    "$ref": "#/definitions/entities.Server"
                },
                "storage": {
                    "$ref": "#/definitions/entities.Storage"
                }
            }
        },
        "errors.HTTPError": {
            "type": "object",
            "properties": {
                "cause": {
                    "type": "string"
                },
                "code": {
                    "type": "integer"
                },
                "context": {
                    "type": "object",
                    "additionalProperties": true
                },
                "message": {
                    "type": "string"
                },
                "stack_trace": {
                    "type": "string"
                }
            }
        },
        "filaments.FilamentsListResponse": {
            "type": "object",
            "properties": {
                "filaments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/usecases.FilamentResponse"
                    }
                }
            }
        },
        "handlers.ExportRequestDTO": {
            "type": "object",
            "properties": {
                "custom_title": {
                    "type": "string"
                },
                "include_calculation": {
                    "type": "boolean"
                },
                "notes": {
                    "type": "string"
                }
            }
        },
        "handlers.FormatInfo": {
            "type": "object",
            "properties": {
                "content_type": {
                    "type": "string"
                },
                "extension": {
                    "type": "string"
                },
                "format": {
                    "type": "string"
                }
            }
        },
        "handlers.SupportedFormatsResponse": {
            "type": "object",
            "properties": {
                "formats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.FormatInfo"
                    }
                }
            }
        },
        "usecases.CreateFilamentRequest": {
            "type": "object",
            "required": [
                "brand",
                "color",
                "material",
                "name",
                "price_per_kg"
            ],
            "properties": {
                "brand": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "color": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "color_hex": {
                    "type": "string"
                },
                "material": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "price_per_kg": {
                    "type": "number",
                    "minimum": 0
                },
                "price_per_meter": {
                    "type": "number",
                    "minimum": 0
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "usecases.FilamentResponse": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                },
                "color_hex": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "material": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner_user_id": {
                    "type": "string"
                },
                "price_per_kg": {
                    "type": "number"
                },
                "price_per_meter": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "usecases.UpdateFilamentRequest": {
            "type": "object",
            "required": [
                "brand",
                "color",
                "material",
                "name",
                "price_per_kg"
            ],
            "properties": {
                "brand": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "color": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "color_hex": {
                    "type": "string"
                },
                "material": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "price_per_kg": {
                    "type": "number",
                    "minimum": 0
                },
                "price_per_meter": {
                    "type": "number",
                    "minimum": 0
                },
                "url": {
                    "type": "string"
                }
            }
        }
    }
}