definitions:
  dto.BuildVolumeDTO:
    properties:
      x:
        type: number
      "y":
        type: number
      z:
        type: number
    type: object
  dto.CalculateQuoteRequest:
    properties:
      modeler_minutes:
        minimum: 0
        type: number
      operator_minutes:
        minimum: 0
        type: number
      print_time_hours:
        minimum: 0
        type: number
      service_type:
        enum:
        - printing_only
        - printing_plus
        - full_service
        type: string
    required:
    - print_time_hours
    - service_type
    type: object
  dto.CalculationResult:
    properties:
      applied_margin:
        type: number
      direct_cost:
        type: number
      energy_cost:
        type: number
      final_price:
        type: number
      labor_cost:
        type: number
      material_cost:
        type: number
      modeler_minutes:
        type: number
      operator_minutes:
        type: number
      print_time_hours:
        type: number
      service_type:
        type: string
      wear_cost:
        type: number
    type: object
  dto.CostPresetResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      is_default:
        type: boolean
      key:
        type: string
      name:
        type: string
      overhead_amount:
        type: number
      updated_at:
        type: string
      wear_percentage:
        type: number
    type: object
  dto.CostPresetsResponse:
    properties:
      cost_presets:
        items:
          $ref: '#/definitions/dto.CostPresetResponse'
        type: array
    type: object
  dto.CostProfileResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      overhead_amount:
        type: number
      quote_id:
        type: integer
      updated_at:
        type: string
      wear_percentage:
        type: number
    type: object
  dto.CreateCostProfileRequest:
    properties:
      description:
        type: string
      overhead_amount:
        minimum: 0
        type: number
      wear_percentage:
        maximum: 100
        minimum: 0
        type: number
    type: object
  dto.CreateEnergyProfileRequest:
    properties:
      base_tariff:
        minimum: 0
        type: number
      description:
        type: string
      flag_surcharge:
        minimum: 0
        type: number
      location:
        type: string
      year:
        maximum: 2030
        minimum: 2020
        type: integer
    required:
    - base_tariff
    - location
    - year
    type: object
  dto.CreateFilamentLineRequest:
    properties:
      filament_id:
        description: 'Option 1: Automatic snapshot from existing filament'
        minimum: 1
        type: integer
      filament_snapshot_brand:
        type: string
      filament_snapshot_color:
        type: string
      filament_snapshot_color_hex:
        type: string
      filament_snapshot_material:
        type: string
      filament_snapshot_name:
        description: 'Option 2: Manual snapshot data (required if filament_id not
          provided)'
        type: string
      filament_snapshot_price_per_kg:
        minimum: 0
        type: number
      filament_snapshot_price_per_meter:
        minimum: 0
        type: number
      filament_snapshot_url:
        type: string
      length_meters:
        minimum: 0
        type: number
      weight_grams:
        description: Required fields
        minimum: 0
        type: number
    required:
    - weight_grams
    type: object
  dto.CreateMachineProfileRequest:
    properties:
      brand:
        type: string
      description:
        type: string
      idle_factor:
        maximum: 1
        minimum: 0
        type: number
      model:
        type: string
      name:
        type: string
      url:
        type: string
      watt:
        minimum: 0
        type: number
    required:
    - brand
    - model
    - name
    - watt
    type: object
  dto.CreateMarginProfileRequest:
    properties:
      description:
        type: string
      full_service_margin:
        minimum: 0
        type: number
      modeler_rate_per_hour:
        minimum: 0
        type: number
      operator_rate_per_hour:
        minimum: 0
        type: number
      printing_only_margin:
        minimum: 0
        type: number
      printing_plus_margin:
        minimum: 0
        type: number
    type: object
  dto.CreateQuoteRequest:
    properties:
      cost_profile:
        $ref: '#/definitions/dto.CreateCostProfileRequest'
      energy_profile:
        $ref: '#/definitions/dto.CreateEnergyProfileRequest'
      filament_lines:
        items:
          $ref: '#/definitions/dto.CreateFilamentLineRequest'
        minItems: 1
        type: array
      machine_profile:
        $ref: '#/definitions/dto.CreateMachineProfileRequest'
      margin_profile:
        $ref: '#/definitions/dto.CreateMarginProfileRequest'
      notes:
        type: string
      title:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - filament_lines
    - title
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        type: string
      enabled:
        type: boolean
      first_name:
        maxLength: 100
        minLength: 1
        type: string
      last_name:
        maxLength: 100
        minLength: 1
        type: string
      password:
        minLength: 8
        type: string
      temporary_password:
        type: boolean
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - username
    type: object
  dto.EnergyLocationResponse:
    properties:
      locations:
        items:
          type: string
        type: array
    type: object
  dto.EnergyPresetResponse:
    properties:
      base_tariff:
        type: number
      city:
        type: string
      created_at:
        type: string
      description:
        type: string
      flag_surcharge:
        type: number
      flag_type:
        type: string
      key:
        type: string
      location:
        type: string
      month:
        type: integer
      state:
        type: string
      updated_at:
        type: string
      year:
        type: integer
    type: object
  dto.EnergyPresetsResponse:
    properties:
      presets:
        items:
          $ref: '#/definitions/dto.EnergyPresetResponse'
        type: array
    type: object
  dto.EnergyProfileResponse:
    properties:
      base_tariff:
        type: number
      created_at:
        type: string
      description:
        type: string
      flag_surcharge:
        type: number
      id:
        type: integer
      location:
        type: string
      quote_id:
        type: integer
      updated_at:
        type: string
      year:
        type: integer
    type: object
  dto.FilamentLineResponse:
    properties:
      created_at:
        type: string
      filament_snapshot_brand:
        type: string
      filament_snapshot_color:
        type: string
      filament_snapshot_color_hex:
        type: string
      filament_snapshot_material:
        type: string
      filament_snapshot_name:
        type: string
      filament_snapshot_price_per_kg:
        type: number
      filament_snapshot_price_per_meter:
        type: number
      filament_snapshot_url:
        type: string
      id:
        type: integer
      length_meters:
        type: number
      quote_id:
        type: integer
      updated_at:
        type: string
      weight_grams:
        type: number
    type: object
  dto.MachinePresetResponse:
    properties:
      brand:
        type: string
      build_volume:
        $ref: '#/definitions/dto.BuildVolumeDTO'
      created_at:
        type: string
      description:
        type: string
      heated_bed:
        type: boolean
      idle_factor:
        type: number
      key:
        type: string
      max_temperature:
        type: integer
      model:
        type: string
      name:
        type: string
      nozzle_diameter:
        type: number
      updated_at:
        type: string
      url:
        type: string
      watt:
        type: number
    type: object
  dto.MachinePresetsResponse:
    properties:
      machines:
        items:
          $ref: '#/definitions/dto.MachinePresetResponse'
        type: array
    type: object
  dto.MachineProfileResponse:
    properties:
      brand:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      idle_factor:
        type: number
      model:
        type: string
      name:
        type: string
      quote_id:
        type: integer
      updated_at:
        type: string
      url:
        type: string
      watt:
        type: number
    type: object
  dto.MarginPresetResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      full_service_margin:
        type: number
      is_default:
        type: boolean
      key:
        type: string
      modeler_rate_per_hour:
        type: number
      name:
        type: string
      operator_rate_per_hour:
        type: number
      printing_only_margin:
        type: number
      printing_plus_margin:
        type: number
      updated_at:
        type: string
    type: object
  dto.MarginPresetsResponse:
    properties:
      margin_presets:
        items:
          $ref: '#/definitions/dto.MarginPresetResponse'
        type: array
    type: object
  dto.MarginProfileResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      full_service_margin:
        type: number
      id:
        type: integer
      modeler_rate_per_hour:
        type: number
      operator_rate_per_hour:
        type: number
      printing_only_margin:
        type: number
      printing_plus_margin:
        type: number
      quote_id:
        type: integer
      updated_at:
        type: string
    type: object
  dto.QuoteResponse:
    properties:
      cost_profile:
        $ref: '#/definitions/dto.CostProfileResponse'
      created_at:
        type: string
      energy_profile:
        $ref: '#/definitions/dto.EnergyProfileResponse'
      filament_lines:
        items:
          $ref: '#/definitions/dto.FilamentLineResponse'
        type: array
      id:
        type: integer
      machine_profile:
        $ref: '#/definitions/dto.MachineProfileResponse'
      margin_profile:
        $ref: '#/definitions/dto.MarginProfileResponse'
      notes:
        type: string
      owner_user_id:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  dto.ResetPasswordRequest:
    properties:
      new_password:
        minLength: 8
        type: string
      temporary:
        type: boolean
    required:
    - new_password
    type: object
  dto.SetUserEnabledRequest:
    properties:
      enabled:
        type: boolean
    type: object
  dto.UpdateCostProfileRequest:
    properties:
      description:
        type: string
      overhead_amount:
        minimum: 0
        type: number
      wear_percentage:
        maximum: 100
        minimum: 0
        type: number
    type: object
  dto.UpdateEnergyProfileRequest:
    properties:
      base_tariff:
        minimum: 0
        type: number
      description:
        type: string
      flag_surcharge:
        minimum: 0
        type: number
      location:
        type: string
      year:
        maximum: 2030
        minimum: 2020
        type: integer
    required:
    - base_tariff
    - location
    - year
    type: object
  dto.UpdateFilamentLineRequest:
    properties:
      filament_snapshot_brand:
        type: string
      filament_snapshot_color:
        type: string
      filament_snapshot_color_hex:
        type: string
      filament_snapshot_material:
        type: string
      filament_snapshot_name:
        type: string
      filament_snapshot_price_per_kg:
        minimum: 0
        type: number
      filament_snapshot_price_per_meter:
        minimum: 0
        type: number
      filament_snapshot_url:
        type: string
      id:
        type: integer
      length_meters:
        minimum: 0
        type: number
      weight_grams:
        minimum: 0
        type: number
    required:
    - filament_snapshot_brand
    - filament_snapshot_color
    - filament_snapshot_material
    - filament_snapshot_name
    - filament_snapshot_price_per_kg
    - weight_grams
    type: object
  dto.UpdateMachineProfileRequest:
    properties:
      brand:
        type: string
      description:
        type: string
      idle_factor:
        maximum: 1
        minimum: 0
        type: number
      model:
        type: string
      name:
        type: string
      url:
        type: string
      watt:
        minimum: 0
        type: number
    required:
    - brand
    - model
    - name
    - watt
    type: object
  dto.UpdateMarginProfileRequest:
    properties:
      description:
        type: string
      full_service_margin:
        minimum: 0
        type: number
      modeler_rate_per_hour:
        minimum: 0
        type: number
      operator_rate_per_hour:
        minimum: 0
        type: number
      printing_only_margin:
        minimum: 0
        type: number
      printing_plus_margin:
        minimum: 0
        type: number
    type: object
  dto.UpdatePresetRequest:
    properties:
      data: {}
    required:
    - data
    type: object
  dto.UpdateQuoteRequest:
    properties:
      cost_profile:
        $ref: '#/definitions/dto.UpdateCostProfileRequest'
      energy_profile:
        $ref: '#/definitions/dto.UpdateEnergyProfileRequest'
      filament_lines:
        items:
          $ref: '#/definitions/dto.UpdateFilamentLineRequest'
        minItems: 1
        type: array
      machine_profile:
        $ref: '#/definitions/dto.UpdateMachineProfileRequest'
      margin_profile:
        $ref: '#/definitions/dto.UpdateMarginProfileRequest'
      notes:
        type: string
      title:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - filament_lines
    - title
    type: object
  dto.UpdateUserRequest:
    properties:
      email:
        type: string
      enabled:
        type: boolean
      first_name:
        maxLength: 100
        minLength: 1
        type: string
      last_name:
        maxLength: 100
        minLength: 1
        type: string
    type: object
  dto.UserResponse:
    properties:
      attributes:
        additionalProperties:
          type: string
        type: object
      created_at:
        type: string
      email:
        type: string
      enabled:
        type: boolean
      first_name:
        type: string
      full_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      roles:
        items:
          type: string
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
  dto.UserRoleRequest:
    properties:
      role:
        type: string
    required:
    - role
    type: object
  dto.UsersListResponse:
    properties:
      page:
        type: integer
      size:
        type: integer
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
    type: object
  entities.CPU:
    description: CPU data
    properties:
      cores:
        format: int32
        type: integer
      model:
        type: string
      threads:
        format: int32
        type: integer
      usage:
        type: string
    type: object
  entities.ColorType:
    enum:
    - solid
    - gradient
    - duo
    - rainbow
    type: string
    x-enum-varnames:
    - ColorTypeSolid
    - ColorTypeGradient
    - ColorTypeDuo
    - ColorTypeRainbow
  entities.ForgotPasswordRequestEntity:
    description: Forgot password request data
    properties:
      email:
        description: User email address
        example: user@example.com
        type: string
    required:
    - email
    type: object
  entities.ForgotPasswordResponseEntity:
    description: Forgot password response data
    properties:
      email:
        description: User email
        example: user@example.com
        type: string
      message:
        description: Success message
        example: Password reset instructions have been sent to your email
        type: string
    type: object
  entities.GPU:
    description: GPU data
    properties:
      available:
        type: boolean
      cores:
        description: Número de núcleos da GPU (quando disponível)
        type: integer
      memory:
        type: string
      model:
        type: string
    type: object
  entities.LoginResponseEntity:
    description: LoginResponseEntity model data
    properties:
      accessToken:
        description: Token to access this API
        type: string
      expiresIn:
        description: Time to expires token in int
        type: integer
      refreshToken:
        description: Token to refresh Access Token
        type: string
    type: object
  entities.Memory:
    description: Memory data
    properties:
      available:
        type: string
      percentage:
        type: string
      total:
        type: string
      used:
        type: string
    type: object
  entities.RegisterResponseEntity:
    description: Registration response data
    properties:
      email:
        description: User email
        example: user@example.com
        type: string
      message:
        description: Success message
        example: User registered successfully
        type: string
      userID:
        description: User ID (UUID)
        example: uuid
        type: string
    type: object
  entities.RequestLoginEntity:
    description: RequestLoginEntity model data
    properties:
      email:
        description: User email
        type: string
      password:
        description: User password
        type: string
    type: object
  entities.RequestRegisterEntity:
    description: Registration request data
    properties:
      email:
        description: User email address
        example: user@example.com
        type: string
      firstName:
        description: User first name
        example: John
        minLength: 2
        type: string
      lastName:
        description: User last name
        example: Doe
        minLength: 2
        type: string
      password:
        description: User password (minimum 8 characters)
        example: SecurePass123
        minLength: 8
        type: string
    required:
    - email
    - firstName
    - lastName
    - password
    type: object
  entities.Server:
    description: Server data
    properties:
      active:
        type: boolean
      version:
        type: string
    type: object
  entities.Storage:
    description: Storage data
    properties:
      percentage:
        type: string
      total:
        type: string
      used:
        type: string
    type: object
  entities.SystemStatus:
    description: System status data
    properties:
      cpu:
        $ref: '#/definitions/entities.CPU'
      gpu:
        $ref: '#/definitions/entities.GPU'
      memory:
        $ref: '#/definitions/entities.Memory'
      os:
        type: string
      server:
        $ref: '#/definitions/entities.Server'
      storage:
        $ref: '#/definitions/entities.Storage'
    type: object
  errors.HTTPError:
    properties:
      cause:
        type: string
      code:
        type: integer
      context:
        additionalProperties: true
        type: object
      message:
        type: string
      stack_trace:
        type: string
    type: object
  handlers.ExportRequestDTO:
    properties:
      custom_title:
        type: string
      include_calculation:
        type: boolean
      notes:
        type: string
    type: object
  handlers.FormatInfo:
    properties:
      content_type:
        type: string
      extension:
        type: string
      format:
        type: string
    type: object
  handlers.SupportedFormatsResponse:
    properties:
      formats:
        items:
          $ref: '#/definitions/handlers.FormatInfo'
        type: array
    type: object
  usecases.BrandListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/usecases.BrandResponse'
        type: array
    type: object
  usecases.BrandResponse:
    properties:
      active:
        type: boolean
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  usecases.CreateBrandRequest:
    properties:
      description:
        type: string
      name:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - name
    type: object
  usecases.CreateFilamentRequest:
    description: Request body for creating a new filament with support for both legacy
      and advanced color systems
    properties:
      brand_id:
        example: 1
        type: integer
      color:
        description: Legacy color fields (maintained for backward compatibility)
        example: White
        maxLength: 100
        minLength: 1
        type: string
      color_data:
        additionalProperties:
          type: string
        type: object
      color_hex:
        example: '#FFFFFF'
        type: string
      color_type:
        allOf:
        - $ref: '#/definitions/entities.ColorType'
        description: Advanced color system (optional, takes precedence over legacy
          fields if provided)
        enum:
        - solid
        - gradient
        - duo
        - rainbow
        example: solid
      diameter:
        example: 1.75
        maximum: 10
        minimum: 0
        type: number
      material_id:
        example: 1
        type: integer
      name:
        example: PLA Premium White
        maxLength: 255
        minLength: 1
        type: string
      price_per_kg:
        example: 125.5
        minimum: 0
        type: number
      price_per_meter:
        example: 0.05
        minimum: 0
        type: number
      url:
        example: https://example.com/filament
        type: string
      weight:
        example: 1000
        minimum: 0
        type: number
    required:
    - brand_id
    - color
    - diameter
    - material_id
    - name
    - price_per_kg
    type: object
  usecases.CreateMaterialRequest:
    properties:
      description:
        type: string
      name:
        maxLength: 50
        minLength: 1
        type: string
      properties:
        type: string
    required:
    - name
    type: object
  usecases.FilamentResponse:
    description: Response object for filament data with support for both legacy and
      advanced color systems
    properties:
      brand:
        example: SUNLU
        type: string
      color:
        description: Legacy color fields (always provided for backward compatibility)
        example: White
        type: string
      color_data:
        additionalProperties:
          type: string
        type: object
      color_hex:
        example: '#FFFFFF'
        type: string
      color_preview:
        example: '#FFFFFF'
        type: string
      color_type:
        allOf:
        - $ref: '#/definitions/entities.ColorType'
        description: Advanced color system (provided when available)
        enum:
        - solid
        - gradient
        - duo
        - rainbow
        example: solid
      created_at:
        example: "2024-01-15T10:30:00Z"
        type: string
      diameter:
        example: 1.75
        type: number
      id:
        example: 1
        type: integer
      material:
        example: PLA
        type: string
      name:
        example: PLA Premium White
        type: string
      owner_user_id:
        example: user-uuid-123
        type: string
      price_per_kg:
        example: 125.5
        type: number
      price_per_meter:
        example: 0.05
        type: number
      updated_at:
        example: "2024-01-15T10:30:00Z"
        type: string
      url:
        example: https://example.com/filament
        type: string
      weight:
        example: 1000
        type: number
    type: object
  usecases.ListResponse:
    description: Response object containing a list of filaments
    properties:
      data:
        items:
          $ref: '#/definitions/usecases.FilamentResponse'
        type: array
    type: object
  usecases.MaterialListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/usecases.MaterialResponse'
        type: array
    type: object
  usecases.MaterialResponse:
    properties:
      active:
        type: boolean
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      properties:
        type: string
      updated_at:
        type: string
    type: object
  usecases.UpdateBrandRequest:
    properties:
      active:
        type: boolean
      description:
        type: string
      name:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - name
    type: object
  usecases.UpdateFilamentRequest:
    description: Request body for updating an existing filament with support for both
      legacy and advanced color systems
    properties:
      brand_id:
        example: 1
        type: integer
      color:
        description: Legacy color fields (maintained for backward compatibility)
        example: White
        maxLength: 100
        minLength: 1
        type: string
      color_data:
        additionalProperties:
          type: string
        type: object
      color_hex:
        example: '#FFFFFF'
        type: string
      color_type:
        allOf:
        - $ref: '#/definitions/entities.ColorType'
        description: Advanced color system (optional, takes precedence over legacy
          fields if provided)
        enum:
        - solid
        - gradient
        - duo
        - rainbow
        example: gradient
      diameter:
        example: 1.75
        maximum: 10
        minimum: 0
        type: number
      material_id:
        example: 1
        type: integer
      name:
        example: PLA Premium White
        maxLength: 255
        minLength: 1
        type: string
      price_per_kg:
        example: 125.5
        minimum: 0
        type: number
      price_per_meter:
        example: 0.05
        minimum: 0
        type: number
      url:
        example: https://example.com/filament
        type: string
      weight:
        example: 1000
        minimum: 0
        type: number
    required:
    - brand_id
    - color
    - diameter
    - material_id
    - name
    - price_per_kg
    type: object
  usecases.UpdateMaterialRequest:
    properties:
      active:
        type: boolean
      description:
        type: string
      name:
        maxLength: 50
        minLength: 1
        type: string
      properties:
        type: string
    required:
    - name
    type: object
info:
  contact: {}
paths:
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Request a password reset for a user account
      parameters:
      - description: Password reset request data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entities.ForgotPasswordRequestEntity'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset request sent
          schema:
            $ref: '#/definitions/entities.ForgotPasswordResponseEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Password Reset Request
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entities.RequestLoginEntity'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login
          schema:
            $ref: '#/definitions/entities.LoginResponseEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: User Login
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate the refresh token and logout the user
      parameters:
      - description: Bearer refresh token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: User Logout
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh the user's access and refresh tokens
      parameters:
      - description: Bearer refresh token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tokens refreshed
          schema:
            $ref: '#/definitions/entities.LoginResponseEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Refresh Login Access Token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account in SpoolIQ
      parameters:
      - description: Registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entities.RequestRegisterEntity'
      produces:
      - application/json
      responses:
        "201":
          description: Successful registration
          schema:
            $ref: '#/definitions/entities.RegisterResponseEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: User Registration
      tags:
      - Auth
  /auth/validate:
    post:
      consumes:
      - application/json
      description: Validate the current access token
      parameters:
      - description: Bearer access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Token is valid
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Validate Auth Token
      tags:
      - Auth
  /exports/formats:
    get:
      description: Returns the list of supported export formats
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SupportedFormatsResponse'
      summary: Get supported export formats
      tags:
      - exports
  /filament-brands:
    get:
      consumes:
      - application/json
      description: Get all filament brands
      parameters:
      - description: Filter only active brands
        in: query
        name: active_only
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved brands
          schema:
            $ref: '#/definitions/usecases.BrandListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get All Brands
      tags:
      - Filament Metadata
    post:
      consumes:
      - application/json
      description: Create a new filament brand
      parameters:
      - description: Brand data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecases.CreateBrandRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created brand
          schema:
            $ref: '#/definitions/usecases.BrandResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Create Brand
      tags:
      - Filament Metadata
  /filament-brands/{id}:
    delete:
      consumes:
      - application/json
      description: Delete/deactivate a brand (admin only)
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted brand
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Delete Brand
      tags:
      - Filament Metadata
    get:
      consumes:
      - application/json
      description: Get a brand by its ID
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved brand
          schema:
            $ref: '#/definitions/usecases.BrandResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get Brand
      tags:
      - Filament Metadata
    put:
      consumes:
      - application/json
      description: Update an existing brand (admin only)
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated brand data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecases.UpdateBrandRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated brand
          schema:
            $ref: '#/definitions/usecases.BrandResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Update Brand
      tags:
      - Filament Metadata
  /filament-materials:
    get:
      consumes:
      - application/json
      description: Get all filament materials
      parameters:
      - description: Filter only active materials
        in: query
        name: active_only
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved materials
          schema:
            $ref: '#/definitions/usecases.MaterialListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get All Materials
      tags:
      - Filament Metadata
    post:
      consumes:
      - application/json
      description: Create a new filament material
      parameters:
      - description: Material data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecases.CreateMaterialRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created material
          schema:
            $ref: '#/definitions/usecases.MaterialResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Create Material
      tags:
      - Filament Metadata
  /filament-materials/{id}:
    delete:
      consumes:
      - application/json
      description: Delete/deactivate a material (admin only)
      parameters:
      - description: Material ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted material
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Delete Material
      tags:
      - Filament Metadata
    get:
      consumes:
      - application/json
      description: Get a material by its ID
      parameters:
      - description: Material ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved material
          schema:
            $ref: '#/definitions/usecases.MaterialResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get Material
      tags:
      - Filament Metadata
    put:
      consumes:
      - application/json
      description: Update an existing material (admin only)
      parameters:
      - description: Material ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated material data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecases.UpdateMaterialRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated material
          schema:
            $ref: '#/definitions/usecases.MaterialResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Update Material
      tags:
      - Filament Metadata
  /filaments:
    get:
      consumes:
      - application/json
      description: Get all filaments accessible to the user (global + user's own)
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved filaments
          schema:
            $ref: '#/definitions/usecases.ListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get All Filaments
      tags:
      - Filaments
    post:
      consumes:
      - application/json
      description: Create a new filament record
      parameters:
      - description: Filament data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecases.CreateFilamentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created filament
          schema:
            $ref: '#/definitions/usecases.FilamentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Create Filament
      tags:
      - Filaments
  /filaments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a filament (only user's own filaments)
      parameters:
      - description: Filament ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted filament
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Delete Filament
      tags:
      - Filaments
    get:
      consumes:
      - application/json
      description: Get a filament by its ID
      parameters:
      - description: Filament ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved filament
          schema:
            $ref: '#/definitions/usecases.FilamentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get Filament
      tags:
      - Filaments
    put:
      consumes:
      - application/json
      description: Update an existing filament (only user's own filaments)
      parameters:
      - description: Filament ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated filament data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecases.UpdateFilamentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated filament
          schema:
            $ref: '#/definitions/usecases.FilamentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Update Filament
      tags:
      - Filaments
  /filaments/{id}/migrate-color:
    post:
      consumes:
      - application/json
      description: Migrate a filament from legacy color system to advanced color system
      parameters:
      - description: Filament ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully migrated filament
          schema:
            $ref: '#/definitions/usecases.FilamentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Migrate Filament Color System
      tags:
      - Filaments
  /filaments/global:
    get:
      consumes:
      - application/json
      description: Get all global filaments (not owned by any user)
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved global filaments
          schema:
            $ref: '#/definitions/usecases.ListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get Global Filaments
      tags:
      - Filaments
  /filaments/my:
    get:
      consumes:
      - application/json
      description: Get all filaments owned by the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user filaments
          schema:
            $ref: '#/definitions/usecases.ListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Get User Filaments
      tags:
      - Filaments
  /presets:
    post:
      consumes:
      - application/json
      description: Creates a new energy or machine preset (admin only)
      parameters:
      - description: 'Preset type: ''energy'' or ''machine'''
        in: query
        name: type
        required: true
        type: string
      - description: Preset data (CreateEnergyPresetRequest or CreateMachinePresetRequest)
        in: body
        name: request
        required: true
        schema: {}
      produces:
      - application/json
      responses:
        "201":
          description: Preset created successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Create preset
      tags:
      - Presets
  /presets/{key}:
    delete:
      description: Deletes a preset by key (admin only)
      parameters:
      - description: Preset key
        in: path
        name: key
        required: true
        type: string
      responses:
        "204":
          description: Preset deleted successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Delete preset
      tags:
      - Presets
    put:
      consumes:
      - application/json
      description: Updates an existing preset by key (admin only)
      parameters:
      - description: Preset key
        in: path
        name: key
        required: true
        type: string
      - description: Updated preset data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePresetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Preset updated successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Update preset
      tags:
      - Presets
  /presets/cost:
    get:
      description: Retrieves all available cost presets
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved cost presets
          schema:
            $ref: '#/definitions/dto.CostPresetsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get cost presets
      tags:
      - Presets
  /presets/energy:
    get:
      description: Retrieves energy presets, optionally filtered by location
      parameters:
      - description: Filter by location
        in: query
        name: location
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved energy presets
          schema:
            $ref: '#/definitions/dto.EnergyPresetsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get energy presets
      tags:
      - Presets
  /presets/energy/locations:
    get:
      description: Retrieves all available locations for energy presets
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved energy locations
          schema:
            $ref: '#/definitions/dto.EnergyLocationResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get energy locations
      tags:
      - Presets
  /presets/machines:
    get:
      description: Retrieves all available machine presets
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved machine presets
          schema:
            $ref: '#/definitions/dto.MachinePresetsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get machine presets
      tags:
      - Presets
  /presets/margin:
    get:
      description: Retrieves all available margin presets
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved margin presets
          schema:
            $ref: '#/definitions/dto.MarginPresetsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get margin presets
      tags:
      - Presets
  /quotes:
    get:
      description: Get all quotes belonging to the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user quotes
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get all quotes for the authenticated user
      tags:
      - Quotes
    post:
      consumes:
      - application/json
      description: Create a new quote with filament lines and profiles
      parameters:
      - description: Quote data
        in: body
        name: quote
        required: true
        schema:
          $ref: '#/definitions/dto.CreateQuoteRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created quote
          schema:
            $ref: '#/definitions/dto.QuoteResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Create a new quote
      tags:
      - Quotes
  /quotes/{id}:
    delete:
      description: Delete a quote and all its related data
      parameters:
      - description: Quote ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: Successfully deleted quote
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Delete a quote
      tags:
      - Quotes
    get:
      description: Get a quote by ID with all its filament lines and profiles
      parameters:
      - description: Quote ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved quote
          schema:
            $ref: '#/definitions/dto.QuoteResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get a quote by ID
      tags:
      - Quotes
    put:
      consumes:
      - application/json
      description: Update a quote with new data
      parameters:
      - description: Quote ID
        in: path
        name: id
        required: true
        type: integer
      - description: Quote data
        in: body
        name: quote
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateQuoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated quote
          schema:
            $ref: '#/definitions/dto.QuoteResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Update a quote
      tags:
      - Quotes
  /quotes/{id}/calculate:
    post:
      consumes:
      - application/json
      description: Calculate all costs for a quote based on provided parameters
      parameters:
      - description: Quote ID
        in: path
        name: id
        required: true
        type: integer
      - description: Calculation parameters
        in: body
        name: calculation
        required: true
        schema:
          $ref: '#/definitions/dto.CalculateQuoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully calculated quote
          schema:
            $ref: '#/definitions/dto.CalculationResult'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Calculate quote costs
      tags:
      - Quotes
  /quotes/{id}/duplicate:
    post:
      description: Create a copy of an existing quote
      parameters:
      - description: Quote ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Successfully duplicated quote
          schema:
            $ref: '#/definitions/dto.QuoteResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Duplicate a quote
      tags:
      - Quotes
  /quotes/{id}/export/csv:
    post:
      consumes:
      - application/json
      description: Exports a quote and its calculation results as CSV
      parameters:
      - description: Quote ID
        in: path
        name: id
        required: true
        type: integer
      - description: Export options
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ExportRequestDTO'
      produces:
      - text/csv
      responses:
        "200":
          description: CSV file
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Export quote as CSV
      tags:
      - exports
  /quotes/{id}/export/json:
    post:
      consumes:
      - application/json
      description: Exports a quote and its calculation results as JSON
      parameters:
      - description: Quote ID
        in: path
        name: id
        required: true
        type: integer
      - description: Export options
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ExportRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: JSON file
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Export quote as JSON
      tags:
      - exports
  /quotes/{id}/export/pdf:
    post:
      consumes:
      - application/json
      description: Exports a quote and its calculation results as PDF
      parameters:
      - description: Quote ID
        in: path
        name: id
        required: true
        type: integer
      - description: Export options
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ExportRequestDTO'
      produces:
      - application/pdf
      responses:
        "200":
          description: PDF file
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Export quote as PDF
      tags:
      - exports
  /system:
    get:
      consumes:
      - application/json
      description: Returns the current system status (OS, CPU, memory, GPU, storage,
        server)
      produces:
      - application/json
      responses:
        "200":
          description: System status info
          schema:
            $ref: '#/definitions/entities.SystemStatus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get System Status
      tags:
      - System
  /users:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of users with optional search filtering
        (admin only)
      parameters:
      - description: Search term for username, email, first name, or last name
        in: query
        name: search
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 20, max: 100)'
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved users
          schema:
            $ref: '#/definitions/dto.UsersListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Get users list
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Creates a new user account (admin only)
      parameters:
      - description: User creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created user
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Create new user
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a user account (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User deleted successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Delete user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Retrieves a user by their ID (admin can get any user, users can
        get themselves)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Get user by ID
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Updates user information (admin can update any user, users can
        update themselves with restrictions)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Update user
      tags:
      - Users
  /users/{id}/enabled:
    patch:
      consumes:
      - application/json
      description: Enables or disables a user account (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Enable/disable data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SetUserEnabledRequest'
      produces:
      - application/json
      responses:
        "204":
          description: User status updated successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Enable/disable user
      tags:
      - Users
  /users/{id}/password:
    patch:
      consumes:
      - application/json
      description: Resets a user's password (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Password reset data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Password reset successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Reset user password
      tags:
      - Users
  /users/{id}/roles:
    post:
      consumes:
      - application/json
      description: Adds a role to a user (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Role data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserRoleRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Role added successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Add role to user
      tags:
      - Users
  /users/{id}/roles/{role}:
    delete:
      consumes:
      - application/json
      description: Removes a role from a user (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Role name
        in: path
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Role removed successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Remove role from user
      tags:
      - Users
  /users/me:
    get:
      consumes:
      - application/json
      description: Retrieves the authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved current user
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Get current user profile
      tags:
      - Users
swagger: "2.0"
