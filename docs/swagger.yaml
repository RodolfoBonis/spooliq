definitions:
  entities.BrandEntity:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  entities.CostPresetEntity:
    properties:
      id:
        type: string
      labor_cost_per_hour:
        type: number
      overhead_percentage:
        type: number
      packaging_cost_per_item:
        type: number
      post_processing_cost_per_hour:
        type: number
      profit_margin_percentage:
        type: number
      quality_control_cost_per_item:
        type: number
      shipping_cost_base:
        type: number
      shipping_cost_per_gram:
        type: number
      support_removal_cost_per_hour:
        type: number
    type: object
  entities.EnergyPresetEntity:
    properties:
      city:
        type: string
      country:
        type: string
      currency:
        type: string
      energy_cost_per_kwh:
        type: number
      id:
        type: string
      off_peak_hour_multiplier:
        type: number
      peak_hour_multiplier:
        type: number
      provider:
        type: string
      state:
        type: string
      tariff_type:
        type: string
    type: object
  entities.FindAllBrandsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/entities.BrandEntity'
        type: array
    type: object
  entities.FindAllMaterialsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/entities.MaterialEntity'
        type: array
    type: object
  entities.FindByIDBrandResponse:
    properties:
      data:
        $ref: '#/definitions/entities.BrandEntity'
    type: object
  entities.FindByIDMaterialResponse:
    properties:
      data:
        $ref: '#/definitions/entities.MaterialEntity'
    type: object
  entities.LoginResponseEntity:
    description: LoginResponseEntity model data
    properties:
      accessToken:
        description: Token to access this API
        type: string
      expiresIn:
        description: Time to expires token in int
        type: integer
      refreshToken:
        description: Token to refresh Access Token
        type: string
    type: object
  entities.MachinePresetEntity:
    properties:
      bed_temperature_max:
        type: number
      brand:
        type: string
      build_volume_x:
        type: number
      build_volume_y:
        type: number
      build_volume_z:
        type: number
      cost_per_hour:
        type: number
      extruder_temperature_max:
        type: number
      filament_diameter:
        type: number
      id:
        type: string
      layer_height_max:
        type: number
      layer_height_min:
        type: number
      model:
        type: string
      nozzle_diameter:
        type: number
      power_consumption:
        type: number
      print_speed_max:
        type: number
    type: object
  entities.MaterialEntity:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      tempExtruder:
        type: number
      tempTable:
        type: number
      updated_at:
        type: string
    type: object
  entities.PresetEntity:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      is_default:
        type: boolean
      name:
        type: string
      type:
        $ref: '#/definitions/entities.PresetType'
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  entities.PresetType:
    enum:
    - machine
    - energy
    - cost
    type: string
    x-enum-varnames:
    - PresetTypeMachine
    - PresetTypeEnergy
    - PresetTypeCost
  entities.RequestLoginEntity:
    description: RequestLoginEntity model data
    properties:
      email:
        description: User email
        type: string
      password:
        description: User password
        type: string
    type: object
  entities.UpsertBrandRequestEntity:
    properties:
      description:
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - name
    type: object
  entities.UpsertMaterialRequestEntity:
    properties:
      description:
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
      tempExtruder:
        maximum: 500
        minimum: 0
        type: number
      tempTable:
        maximum: 300
        minimum: 0
        type: number
    required:
    - name
    type: object
  errors.HTTPError:
    properties:
      cause:
        type: string
      code:
        type: integer
      context:
        additionalProperties: true
        type: object
      message:
        type: string
      stack_trace:
        type: string
    type: object
  usecases.CreateCostPresetRequest:
    properties:
      description:
        type: string
      is_default:
        type: boolean
      labor_cost_per_hour:
        minimum: 0
        type: number
      name:
        type: string
      overhead_percentage:
        maximum: 100
        minimum: 0
        type: number
      packaging_cost_per_item:
        minimum: 0
        type: number
      post_processing_cost_per_hour:
        minimum: 0
        type: number
      profit_margin_percentage:
        maximum: 100
        minimum: 0
        type: number
      quality_control_cost_per_item:
        minimum: 0
        type: number
      shipping_cost_base:
        minimum: 0
        type: number
      shipping_cost_per_gram:
        minimum: 0
        type: number
      support_removal_cost_per_hour:
        minimum: 0
        type: number
      user_id:
        type: string
    required:
    - name
    type: object
  usecases.CreateEnergyPresetRequest:
    properties:
      city:
        type: string
      country:
        type: string
      currency:
        type: string
      description:
        type: string
      energy_cost_per_kwh:
        type: number
      is_default:
        type: boolean
      name:
        type: string
      off_peak_hour_multiplier:
        type: number
      peak_hour_multiplier:
        type: number
      provider:
        type: string
      state:
        type: string
      tariff_type:
        type: string
      user_id:
        type: string
    required:
    - currency
    - energy_cost_per_kwh
    - name
    - off_peak_hour_multiplier
    - peak_hour_multiplier
    type: object
  usecases.CreateMachinePresetRequest:
    properties:
      bed_temperature_max:
        type: number
      brand:
        type: string
      build_volume_x:
        type: number
      build_volume_y:
        type: number
      build_volume_z:
        type: number
      cost_per_hour:
        type: number
      description:
        type: string
      extruder_temperature_max:
        type: number
      filament_diameter:
        type: number
      is_default:
        type: boolean
      layer_height_max:
        type: number
      layer_height_min:
        type: number
      model:
        type: string
      name:
        type: string
      nozzle_diameter:
        type: number
      power_consumption:
        type: number
      print_speed_max:
        type: number
      user_id:
        type: string
    required:
    - build_volume_x
    - build_volume_y
    - build_volume_z
    - filament_diameter
    - layer_height_max
    - layer_height_min
    - name
    - nozzle_diameter
    - power_consumption
    - print_speed_max
    type: object
  usecases.UpdateCostPresetRequest:
    properties:
      description:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      is_default:
        type: boolean
      labor_cost_per_hour:
        type: number
      name:
        type: string
      overhead_percentage:
        type: number
      packaging_cost_per_item:
        type: number
      post_processing_cost_per_hour:
        type: number
      profit_margin_percentage:
        type: number
      quality_control_cost_per_item:
        type: number
      shipping_cost_base:
        type: number
      shipping_cost_per_gram:
        type: number
      support_removal_cost_per_hour:
        type: number
    required:
    - id
    type: object
  usecases.UpdateEnergyPresetRequest:
    properties:
      city:
        type: string
      country:
        type: string
      currency:
        type: string
      description:
        type: string
      energy_cost_per_kwh:
        type: number
      id:
        type: string
      is_active:
        type: boolean
      is_default:
        type: boolean
      name:
        type: string
      off_peak_hour_multiplier:
        type: number
      peak_hour_multiplier:
        type: number
      provider:
        type: string
      state:
        type: string
      tariff_type:
        type: string
    required:
    - id
    type: object
  usecases.UpdateMachinePresetRequest:
    properties:
      bed_temperature_max:
        type: number
      brand:
        type: string
      build_volume_x:
        type: number
      build_volume_y:
        type: number
      build_volume_z:
        type: number
      cost_per_hour:
        type: number
      description:
        type: string
      extruder_temperature_max:
        type: number
      filament_diameter:
        type: number
      id:
        type: string
      is_active:
        type: boolean
      is_default:
        type: boolean
      layer_height_max:
        type: number
      layer_height_min:
        type: number
      model:
        type: string
      name:
        type: string
      nozzle_diameter:
        type: number
      power_consumption:
        type: number
      print_speed_max:
        type: number
    required:
    - id
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entities.RequestLoginEntity'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login
          schema:
            $ref: '#/definitions/entities.LoginResponseEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: User Login
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate the refresh token and logout the user
      parameters:
      - description: Bearer refresh token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: User Logout
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh the user's access and refresh tokens
      parameters:
      - description: Bearer refresh token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tokens refreshed
          schema:
            $ref: '#/definitions/entities.LoginResponseEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Refresh Login Access Token
      tags:
      - Auth
  /auth/validate:
    post:
      consumes:
      - application/json
      description: Validate the current access token
      parameters:
      - description: Bearer access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Token is valid
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Validate Auth Token
      tags:
      - Auth
  /brands:
    get:
      consumes:
      - application/json
      description: Find All existing filament brands
      produces:
      - application/json
      responses:
        "200":
          description: Successfully List All Brands
          schema:
            $ref: '#/definitions/entities.FindAllBrandsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Find All Brands
      tags:
      - Brands
    post:
      consumes:
      - application/json
      description: Create a new filament brand
      parameters:
      - description: Brand data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entities.UpsertBrandRequestEntity'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created brand
          schema:
            $ref: '#/definitions/entities.BrandEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Create Brand
      tags:
      - Brands
  /brands/{id}:
    delete:
      description: Delete a filament brand by its ID
      parameters:
      - description: Brand ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: Successfully deleted brand
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Delete Brand
      tags:
      - Brands
    get:
      consumes:
      - application/json
      description: Get a specific filament brand by its ID
      parameters:
      - description: Brand ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved brand
          schema:
            $ref: '#/definitions/entities.FindByIDBrandResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Get Brand by ID
      tags:
      - Brands
    put:
      consumes:
      - application/json
      description: Update an existing filament brand
      parameters:
      - description: Brand ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Brand data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entities.UpsertBrandRequestEntity'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated brand
          schema:
            $ref: '#/definitions/entities.BrandEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Update Brand
      tags:
      - Brands
  /materials:
    get:
      consumes:
      - application/json
      description: Find All existing 3D printing materials
      produces:
      - application/json
      responses:
        "200":
          description: Successfully List All Materials
          schema:
            $ref: '#/definitions/entities.FindAllMaterialsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Find All Materials
      tags:
      - Materials
    post:
      consumes:
      - application/json
      description: Create a new 3D printing material
      parameters:
      - description: Material data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entities.UpsertMaterialRequestEntity'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created material
          schema:
            $ref: '#/definitions/entities.MaterialEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Create Material
      tags:
      - Materials
  /materials/{id}:
    delete:
      description: Delete a 3D printing material by its ID
      parameters:
      - description: Material ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: Successfully deleted material
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Delete Material
      tags:
      - Materials
    get:
      consumes:
      - application/json
      description: Get a specific 3D printing material by its ID
      parameters:
      - description: Material ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved material
          schema:
            $ref: '#/definitions/entities.FindByIDMaterialResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Get Material by ID
      tags:
      - Materials
    put:
      consumes:
      - application/json
      description: Update an existing 3D printing material
      parameters:
      - description: Material ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Material data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entities.UpsertMaterialRequestEntity'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated material
          schema:
            $ref: '#/definitions/entities.MaterialEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Update Material
      tags:
      - Materials
  /presets:
    get:
      consumes:
      - application/json
      description: Retrieve presets with optional filters including type, active status,
        default status, global status, and user ID
      parameters:
      - description: Preset type filter (machine, energy, cost)
        in: query
        name: type
        type: string
      - description: Filter only active presets
        in: query
        name: active
        type: boolean
      - description: Filter only default presets
        in: query
        name: default
        type: boolean
      - description: Filter only global presets
        in: query
        name: global
        type: boolean
      - description: Filter presets by user ID (UUID format)
        in: query
        name: user_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved presets
          schema: {}
        "400":
          description: Bad Request - Invalid user ID format
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get presets with filters
      tags:
      - Presets
  /presets/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a preset by its unique identifier
      parameters:
      - description: Preset ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Preset deleted successfully
        "400":
          description: Bad Request - Invalid ID format
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Delete preset
      tags:
      - Presets
    get:
      consumes:
      - application/json
      description: Retrieve a specific preset by its unique identifier
      parameters:
      - description: Preset ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved preset
          schema:
            $ref: '#/definitions/entities.PresetEntity'
        "400":
          description: Bad Request - Invalid ID format
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found - Preset not found
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get preset by ID
      tags:
      - Presets
  /presets/costs:
    get:
      consumes:
      - application/json
      description: Retrieve all available cost presets with pricing and margin configurations
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved cost presets
          schema:
            items:
              $ref: '#/definitions/entities.PresetEntity'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get all cost presets
      tags:
      - Cost Presets
    post:
      consumes:
      - application/json
      description: Create a new cost preset with labor costs, packaging, shipping,
        overhead, and profit margins
      parameters:
      - description: Cost preset creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecases.CreateCostPresetRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Cost preset created successfully
          schema:
            $ref: '#/definitions/entities.PresetEntity'
        "400":
          description: Bad Request - Invalid request data
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Create cost preset
      tags:
      - Cost Presets
  /presets/costs/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific cost preset with complete pricing and margin
        details by its ID
      parameters:
      - description: Cost preset ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved cost preset
          schema:
            $ref: '#/definitions/entities.CostPresetEntity'
        "400":
          description: Bad Request - Invalid ID format
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found - Cost preset not found
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get cost preset by ID
      tags:
      - Cost Presets
    put:
      consumes:
      - application/json
      description: Update an existing cost preset with new pricing and margin configurations
      parameters:
      - description: Cost preset ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      - description: Cost preset update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecases.UpdateCostPresetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Cost preset updated successfully
          schema:
            $ref: '#/definitions/entities.PresetEntity'
        "400":
          description: Bad Request - Invalid ID format or request data
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Update cost preset
      tags:
      - Cost Presets
  /presets/energy:
    get:
      consumes:
      - application/json
      description: Retrieve all available energy presets with pricing and location
        data
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved energy presets
          schema:
            items:
              $ref: '#/definitions/entities.PresetEntity'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get all energy presets
      tags:
      - Energy Presets
    post:
      consumes:
      - application/json
      description: Create a new energy preset with cost per kWh, currency, and location
        information
      parameters:
      - description: Energy preset creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecases.CreateEnergyPresetRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Energy preset created successfully
          schema:
            $ref: '#/definitions/entities.PresetEntity'
        "400":
          description: Bad Request - Invalid request data
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Create energy preset
      tags:
      - Energy Presets
  /presets/energy/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific energy preset with complete pricing and location
        details by its ID
      parameters:
      - description: Energy preset ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved energy preset
          schema:
            $ref: '#/definitions/entities.EnergyPresetEntity'
        "400":
          description: Bad Request - Invalid ID format
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found - Energy preset not found
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get energy preset by ID
      tags:
      - Energy Presets
    put:
      consumes:
      - application/json
      description: Update an existing energy preset with new pricing and location
        information
      parameters:
      - description: Energy preset ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      - description: Energy preset update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecases.UpdateEnergyPresetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Energy preset updated successfully
          schema:
            $ref: '#/definitions/entities.PresetEntity'
        "400":
          description: Bad Request - Invalid ID format or request data
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Update energy preset
      tags:
      - Energy Presets
  /presets/energy/currency/{currency}:
    get:
      consumes:
      - application/json
      description: Retrieve energy presets that use a specific currency (3-letter
        currency code)
      parameters:
      - description: Currency code (3 letters, e.g., USD, EUR, BRL)
        in: path
        name: currency
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved energy presets by currency
          schema:
            items:
              $ref: '#/definitions/entities.EnergyPresetEntity'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get energy presets by currency
      tags:
      - Energy Presets
  /presets/energy/location:
    get:
      consumes:
      - application/json
      description: Retrieve energy presets filtered by country, state, and/or city
      parameters:
      - description: Filter by country
        in: query
        name: country
        type: string
      - description: Filter by state/province
        in: query
        name: state
        type: string
      - description: Filter by city
        in: query
        name: city
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved energy presets by location
          schema:
            items:
              $ref: '#/definitions/entities.EnergyPresetEntity'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get energy presets by location
      tags:
      - Energy Presets
  /presets/machines:
    get:
      consumes:
      - application/json
      description: Retrieve all available machine presets with their specifications
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved machine presets
          schema:
            items:
              $ref: '#/definitions/entities.PresetEntity'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get all machine presets
      tags:
      - Machine Presets
    post:
      consumes:
      - application/json
      description: Create a new machine preset with specifications like build volume,
        nozzle diameter, and power consumption
      parameters:
      - description: Machine preset creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecases.CreateMachinePresetRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Machine preset created successfully
          schema:
            $ref: '#/definitions/entities.PresetEntity'
        "400":
          description: Bad Request - Invalid request data
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Create machine preset
      tags:
      - Machine Presets
  /presets/machines/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific machine preset with complete specifications
        by its ID
      parameters:
      - description: Machine preset ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved machine preset
          schema:
            $ref: '#/definitions/entities.MachinePresetEntity'
        "400":
          description: Bad Request - Invalid ID format
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found - Machine preset not found
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get machine preset by ID
      tags:
      - Machine Presets
    put:
      consumes:
      - application/json
      description: Update an existing machine preset with new specifications
      parameters:
      - description: Machine preset ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      - description: Machine preset update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecases.UpdateMachinePresetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Machine preset updated successfully
          schema:
            $ref: '#/definitions/entities.PresetEntity'
        "400":
          description: Bad Request - Invalid ID format or request data
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - Bearer: []
      summary: Update machine preset
      tags:
      - Machine Presets
  /presets/machines/brand/{brand}:
    get:
      consumes:
      - application/json
      description: Retrieve all machine presets from a specific brand
      parameters:
      - description: Machine brand name
        in: path
        name: brand
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved machine presets by brand
          schema:
            items:
              $ref: '#/definitions/entities.MachinePresetEntity'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get machine presets by brand
      tags:
      - Machine Presets
swagger: "2.0"
