name: CI/CD Pipeline - spooliq


on:
  push:
    branches:
      - main
      - develop
    paths-ignore:
      - 'version.txt'
  pull_request:
    branches:
      - main
      - develop
    types:
      - opened
      - synchronize
      - reopened

permissions:
  contents: write
  checks: read
  discussions: write
  repository-projects: write
  issues: write
  pull-requests: write      

env:
  GO_VERSION: '1.23'

jobs:
  lint_go:
    name: Lint Go Code
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.lint.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Setup git config for private repos
        run: |
          git config --global url."https://${{ github.token }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

      - name: Download dependencies
        run: go mod download

      - name: Install Lint Dependencies
        run: |
          go install golang.org/x/lint/golint@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest
          go install golang.org/x/tools/cmd/goimports@latest
          export PATH=$PATH:$(go env GOPATH)/bin

      - name: Run lint
        id: lint
        run: |
          if [ -f .config/scripts/lint.sh ]; then
            chmod +x .config/scripts/lint.sh
            export PATH=$PATH:$(go env GOPATH)/bin
            set +e
            ./.config/scripts/lint.sh > lint_output.txt 2>&1
            echo "status=$?" >> $GITHUB_OUTPUT
            set -e
          else
            echo "status=0" >> $GITHUB_OUTPUT
          fi

      - name: Install Python dependencies for comment
        if: ${{ github.event_name == 'pull_request' && steps.lint.outputs.status != '0' }}
        run: |
          if [ -f .config/scripts/requirements.txt ]; then
            pip install -r .config/scripts/requirements.txt
          else
            pip install openai PyGithub
          fi

      - name: Comment lint issues on PR
        if: ${{ github.event_name == 'pull_request' && steps.lint.outputs.status != '0' }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          GITHUB_TOKEN: ${{ github.token }}
          REPO_NAME: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          if [ -f .config/scripts/generate_lint_report.py ]; then
            python .config/scripts/generate_lint_report.py
          fi

      - name: Exit if lint failed
        if: ${{ steps.lint.outputs.status != '0' }}
        run: exit 1

      - name: Upload lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: lint_output.txt

  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Setup git config for private repos (if needed)
        run: |
          git config --global url."https://${{ github.token }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

      - name: Download dependencies
        run: go mod download

      - name: Run tests with coverage (Windows)
        if: runner.os == 'Windows'
        run: |
          go test -v -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Run tests with coverage (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html

  check_vulnerabilities:
    name: Security Vulnerability Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Define Private Dependencies
        run: |
          export GOPRIVATE=github.com/RodolfoBonis/go_key_guardian

      - name: Run govulncheck
        id: govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./... > vulnerability_report.txt 2>&1 || echo "Vulnerabilities found"

      - name: Install Python dependencies for vulnerability comment
        if: ${{ steps.govulncheck.outcome == 'failure' && github.event_name == 'pull_request' }}
        run: |
          pip install -r .config/scripts/requirements.txt
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          GITHUB_TOKEN: ${{ github.token }}
          REPO_NAME: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

      - name: Comment vulnerability issues on PR
        if: ${{ steps.govulncheck.outcome == 'failure' && github.event_name == 'pull_request'}}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          GITHUB_TOKEN: ${{ github.token }}
          REPO_NAME: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: python .config/scripts/generate_vulnerability_report.py


      - name: Upload vulnerability report
        if: ${{ steps.govulncheck.outcome == 'failure' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "## 🔒 Security Vulnerability Report" >> vulnerability_summary.md
          echo "" >> vulnerability_summary.md
          echo "Vulnerabilities were found in this build:" >> vulnerability_summary.md
          echo "" >> vulnerability_summary.md
          echo '```' >> vulnerability_summary.md
          cat vulnerability_report.txt >> vulnerability_summary.md
          echo '```' >> vulnerability_summary.md

      - name: Upload vulnerability artifacts
        if: ${{ steps.govulncheck.outcome == 'failure' }}
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-report
          path: |
            vulnerability_report.txt
            vulnerability_summary.md

      - name: Fail job if vulnerabilities found
        if: ${{ steps.govulncheck.outcome == 'failure' }}
        run: exit 1

  notify_success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [lint_go, test, check_vulnerabilities]
    if: ${{ needs.lint_go.result == 'success' && needs.test.result == 'success' && needs.check_vulnerabilities.result == 'success' }}
    steps:
      - name: Generate success message
        id: generate_success_message
        run: |
          echo '✅ **CI Pipeline Successful!**' > telegram_message_success.txt
          echo '' >> telegram_message_success.txt
          echo '📋 **Build Details:**' >> telegram_message_success.txt
          echo '- Repository: ${{ github.repository }}' >> telegram_message_success.txt
          echo '- Triggered by: ${{ github.actor }}' >> telegram_message_success.txt
          echo '- Commit: ${{ github.sha }}' >> telegram_message_success.txt
          echo '- Branch: ${{ github.event_name == 'pull_request' && github.head_ref && github.base_ref && format('{0} -> {1}', github.head_ref, github.base_ref) || github.ref_name }}' >> telegram_message_success.txt
          echo '- PR URL: ${{ github.event_name == 'pull_request' && format('https://github.com/{0}/pull/{1}', github.repository, github.event.pull_request.number) || env.PR_URL }}' >> telegram_message_success.txt
          echo '' >> telegram_message_success.txt
          echo '✨ All tests passed, code linted successfully, and no vulnerabilities found!' >> telegram_message_success.txt
          
          MESSAGE=$(cat telegram_message_success.txt)
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Telegram notification on success
        if: ${{ needs.lint_go.result == 'success' && needs.test.result == 'success' && needs.check_vulnerabilities.result == 'success' }}
        uses: an3park/telegram-action@v1
        with:
          chat_id: ${{ secrets.BOTTOKEN }}
          bot_token: ${{ secrets.CHAT_ID }}
          message_thread_id: ${{ secrets.THREAD_ID }}
          message: ${{ steps.generate_success_message.outputs.message }}

  notify_failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [lint_go, test, check_vulnerabilities]
    if: ${{ needs.lint_go.result != 'success' || needs.test.result != 'success' || needs.check_vulnerabilities.result != 'success' }}
    steps:
      - name: Generate failure message
        id: generate_error_message
        run: |
          echo '❌ **CI Pipeline Failed!**' > telegram_message_error.txt
          echo '' >> telegram_message_error.txt
          echo '📋 **Build Details:**' >> telegram_message_error.txt
          echo '- Repository: ${{ github.repository }}' >> telegram_message_error.txt
          echo '- Triggered by: ${{ github.actor }}' >> telegram_message_error.txt
          echo '- Commit: ${{ github.sha }}' >> telegram_message_error.txt
          echo '- Branch: ${{ github.event_name == 'pull_request' && github.head_ref && github.base_ref && format('{0} -> {1}', github.head_ref, github.base_ref) || github.ref_name }}' >> telegram_message_error.txt
          echo '- PR URL: ${{ github.event_name == 'pull_request' && format('https://github.com/{0}/pull/{1}', github.repository, github.event.pull_request.number) || env.PR_URL }}' >> telegram_message_error.txt
          echo '' >> telegram_message_error.txt
          echo '- Commit URL: https://github.com/${{ github.repository }}/commit/${{ github.sha }}' >> telegram_message_error.txt
          echo '⚠️ [Check GitHub Actions Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})' >> telegram_message_error.txt
          echo '' >> telegram_message_error.txt
          echo '🔍 **Failure Summary:**' >> telegram_message_error.txt
          
          MESSAGE=$(cat telegram_message_error.txt)
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Telegram notification on failure
        if: ${{ needs.lint_go.result != 'success' || needs.test.result != 'success' || needs.check_vulnerabilities.result != 'success' }}
        uses: an3park/telegram-action@v1
        with:
          chat_id: ${{ secrets.BOTTOKEN }}
          bot_token: ${{ secrets.CHAT_ID }}
          message_thread_id: ${{ secrets.THREAD_ID }}
          message: ${{ steps.generate_error_message.outputs.message }}
